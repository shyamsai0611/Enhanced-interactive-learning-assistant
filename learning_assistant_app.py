import streamlit as st
import wikipedia
import datetime
import random

def fetch_from_web(topic):
    try:
        summary = wikipedia.summary(topic, sentences=5)
        source = wikipedia.page(topic).url
        return summary, source
    except:
        return f"No web content found for {topic}.", "https://en.wikipedia.org/"

def fetch_from_video(topic):
    transcript = f"This simulated transcript explains the concept of {topic} using real-world examples and visuals to help beginners and advanced learners."
    source = f"https://www.youtube.com/results?search_query={topic.replace(' ', '+')}"
    return transcript, source

def fetch_from_academic(topic):
    paper_summary = f"A simulated academic overview on {topic} including theoretical background and latest research findings from recent publications."
    source = f"https://scholar.google.com/scholar?q={topic.replace(' ', '+')}"
    return paper_summary, source

def generate_report(topic, user_profile, research):
    date = datetime.date.today().strftime("%B %d, %Y")
    divider = "-" * 80

    report = f"""
📘 **Learning Report on: {topic}**
🗓️ Date: {date}

{divider}

### 🎯 Learning Objectives
{user_profile['learning_goal']}

### 🧠 Learner Profile
- **Knowledge Level:** {user_profile['knowledge_level']}
- **Interest Focus:** {user_profile['interest_focus']}
- **Preferred Format:** {user_profile['preferred_format']}

{divider}

### 🌐 Web Content Summary
{research['web']['content']}

🔗 Citation: {research['web']['source']}

{divider}

### 🎥 Video Transcript (Simulated)
{research['video']['content']}

🔗 Citation: {research['video']['source']}

{divider}

### 📚 Academic Research Summary (Simulated)
{research['academic']['content']}

🔗 Citation: {research['academic']['source']}

{divider}

### 📊 Visual Aid
Imagine a diagram here representing the concept flow of **{topic}**.

[NOTE: Diagrams and visualizations can be added in future updates.]

{divider}

### 🔁 Suggested Resources
- Read more at: {research['web']['source']}
- Watch tutorials: {research['video']['source']}
- Explore academic papers: {research['academic']['source']}

{divider}

### 📝 Recommendations for You
- Explore beginner-friendly blogs or courses on "{topic}".
- Apply your learning through small projects or quizzes.
- Ask follow-up questions to refine your learning journey.

{divider}

*Report generated by the Enhanced Interactive Learning Assistant*
"""
    return report

st.set_page_config(page_title="AI Learning Assistant", layout="centered")
st.title("📚 Enhanced Interactive Learning Assistant")
st.markdown("Create a personalized, AI-powered learning report from a topic of your choice.")

topic = st.text_input("🔍 Enter a learning topic:")

if topic:
    st.subheader("🧠 Clarifying Questions")
    learning_goal = st.text_input("🎯 What do you want to learn or achieve?")
    interest_focus = st.text_input("📌 Any specific areas or subtopics you're interested in?")
    knowledge_level = st.selectbox("📘 Your prior knowledge level:", ["Beginner", "Intermediate", "Advanced"])
    preferred_format = st.selectbox("🖥️ Preferred learning format:", ["Text", "Video", "Hands-on Examples"])

    user_profile = {
        "learning_goal": learning_goal or "General understanding",
        "interest_focus": interest_focus or "None specified",
        "knowledge_level": knowledge_level,
        "preferred_format": preferred_format
    }

    if st.button("📄 Generate Learning Report"):
        with st.spinner("Fetching and synthesizing information..."):

            web_summary, web_source = fetch_from_web(topic)
            video_transcript, video_source = fetch_from_video(topic)
            academic_summary, academic_source = fetch_from_academic(topic)

            research = {
                "web": {"content": web_summary, "source": web_source},
                "video": {"content": video_transcript, "source": video_source},
                "academic": {"content": academic_summary, "source": academic_source}
            }

            report = generate_report(topic, user_profile, research)

            st.success("✅ Report generated successfully!")
            st.text_area("📝 Learning Report Preview", value=report, height=500)
            st.download_button("📥 Download Report as TXT", data=report, file_name=f"{topic}_report.txt")

            st.subheader("🔄 Modify Your Report")
            if st.button("🔁 Add Follow-up Question Example"):
                st.info("Q: Can you explain this in simpler terms?\nA: Future versions will allow real-time simplification and updates.")

else:
    st.warning("Please enter a topic to begin.")
